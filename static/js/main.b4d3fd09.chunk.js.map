{"version":3,"sources":["serviceWorker.js","actions/listActions.js","components/AddInput.js","actions/type.js","components/ListsOverview.js","actions/todoActions.js","components/TodoList.js","App.js","reducers/util.js","store/store.js","reducers/todoListsReducer.js","reducers/selectedListReducer.js","index.js","reducers/rootReducer.js","store/localStore.js"],"names":["Boolean","window","location","hostname","match","uuid","AddInput","lable","onAdd","useState","value","setValue","className","onSubmit","e","preventDefault","type","placeholder","aria-label","onChange","target","actionType","Object","freeze","addList","selectList","deleteList","addTodo","checkTodo","clearCompletedTodos","name","id","addListWithId","ListsOverviewView","todoLists","selectedListId","dispatch","dispatchSelectList","map","key","onClick","getTodoLists","R","getSelectedListId","selectedList","ListsOverview","useSelector","useDispatch","toList","addTodoWithId","addTodoFactory","TodoListView","todos","remainingTodos","filter","done","length","dispatchCheckTodo","checked","htmlFor","renderTodo","fromList","getSelectedList","find","TodoList","App","reducers","href","buildStoreFactory","createStore","applyMiddleware","thunk","composeWithDevTools","rootReducer","preloadedState","defaultIfEqual","defaultValue","initialState","state","todo","listId","index","todoList","keepRefUpdate","fn","x","todolist","fromListId","undefined","store","buildStore","rootState","action","reducer","localStorage","storeKey","stateString","getItem","JSON","parse","getStateFromLocalStore","subscribe","setItem","stringify","getState","syncToLocalStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b4d3fd09.chunk.js","sourcesContent":["/* eslint-disable */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { uuid } from 'uuidv4'\r\nimport actionType from './type'\r\n\r\nexport const addListWithId = (name, id) => ({\r\n\ttype: actionType.addList,\r\n\tname,\r\n\tid,\r\n})\r\n\r\nexport const addListFactory = uuid => name => addListWithId(name, uuid())\r\n\r\nexport const addList = addListFactory(uuid)\r\n\r\nexport const selectList = (id, name) => ({\r\n\ttype: actionType.selectList,\r\n\tid,\r\n\tname,\r\n})\r\n\r\nexport const deleteList = (id, name) => ({\r\n\ttype: actionType.deleteList,\r\n\tid,\r\n\tname,\r\n})\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './AddInput.css'\r\n\r\nconst AddInput = ({ lable, onAdd }) => {\r\n\tconst [value, setValue] = useState('')\r\n\tconst handleSubmit = e => {\r\n\t\te.preventDefault()\r\n\t\tonAdd(value)\r\n\t\tsetValue('')\r\n\t}\r\n\treturn <form className=\"add-input\" onSubmit={handleSubmit}>\r\n\t\t<input\r\n\t\t\ttype=\"text\"\r\n\t\t\tplaceholder={lable}\r\n\t\t\taria-label={lable}\r\n\t\t\tvalue={value}\r\n\t\t\tonChange={e => {\r\n\t\t\t\tsetValue(e.target.value)\r\n\t\t\t}}\r\n\t\t/>\r\n\t\t<button aria-label=\"create new list\">+</button>\r\n\t</form>\r\n}\r\n\r\nAddInput.propTypes = {\r\n\tlable: PropTypes.string,\r\n\tonAdd: PropTypes.func,\r\n}\r\n\r\nexport default AddInput\r\n","const actionType = Object.freeze({\r\n\taddList: 'ADD_LIST',\r\n\tselectList: 'SELECT_LIST',\r\n\tdeleteList: 'DELETE_LIST',\r\n\r\n\taddTodo: 'ADD_TODO',\r\n\tcheckTodo: 'CHECK_TODO',\r\n\tclearCompletedTodos: 'CLEAR_COMPLETED_TODOS',\r\n})\r\n\r\nexport default actionType\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport * as R from 'ramda'\r\nimport './ListsOverview.css'\r\n\r\nimport AddInput from './AddInput'\r\nimport { addList, selectList } from '../actions/listActions'\r\n\r\nexport const ListsOverviewView = ({todoLists, selectedListId, dispatch}) => {\r\n\tconst dispatchAddList = name => dispatch(addList(name))\r\n\tconst dispatchSelectList = (id, name) => dispatch(selectList(id, name))\r\n\tconst renderListItem = ({name, id}) => <li\r\n\t\tclassName={id === selectedListId ? 'active' : ''}\r\n\t\tkey={id}\r\n\t\tonClick={() => dispatchSelectList(id, name)}\r\n\t>{name}</li>\r\n\treturn <div className=\"lists-overview\">\r\n\t\t<h2>My lists</h2>\r\n\t\t<ul>\r\n\t\t\t{todoLists.map(renderListItem)}\r\n\t\t</ul>\r\n\t\t<AddInput lable=\"new list name\" onAdd={dispatchAddList} />\r\n\t</div>\r\n}\r\n\r\nexport const getTodoLists = R.prop('todoLists')\r\n\r\nexport const getSelectedListId = ({selectedList}) => selectedList.id\r\n\r\nconst ListsOverview = () => {\r\n\tconst todoLists = useSelector(getTodoLists)\r\n\tconst selectedListId = useSelector(getSelectedListId)\r\n\tconst dispatch = useDispatch()\r\n\treturn <ListsOverviewView todoLists={todoLists} selectedListId={selectedListId} dispatch={dispatch} />\r\n}\r\n\r\nexport default ListsOverview\r\n","import * as R from 'ramda'\r\nimport { uuid } from 'uuidv4'\r\nimport actionType from './type'\r\n\r\nexport const addTodoWithId = (name, toList, id) => ({\r\n\ttype: actionType.addTodo,\r\n\tname,\r\n\tid,\r\n\ttoList: R.pick(['id', 'name'], toList),\r\n})\r\n\r\nexport const addTodoFactory = uuid => (name, toList) => addTodoWithId(name, toList, uuid())\r\n\r\nexport const addTodo = addTodoFactory(uuid)\r\n\r\nexport const checkTodo = (id, name, done) => ({\r\n\ttype: actionType.checkTodo,\r\n\tid,\r\n\tname,\r\n\tdone,\r\n})\r\n\r\nexport const clearCompletedTodos = fromList => ({\r\n\ttype: actionType.clearCompletedTodos,\r\n\tfromList: R.pick(['id', 'name'], fromList),\r\n})\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport './TodoList.css'\r\n\r\nimport AddInput from './AddInput'\r\nimport { deleteList } from '../actions/listActions'\r\nimport { addTodo, checkTodo, clearCompletedTodos } from '../actions/todoActions'\r\n\r\nconst renderTodo = dispatchCheckTodo => ({id, name, done}) =>\r\n\t<div className=\"todo\" key={id} >\r\n\t\t<input\r\n\t\t\ttype=\"checkbox\"\r\n\t\t\tid={id}\r\n\t\t\tchecked={done}\r\n\t\t\tonChange={e => dispatchCheckTodo(id, name, e.target.checked)}\r\n\t\t/>\r\n\t\t<label htmlFor={id}>\r\n\t\t\t<span className=\"custom-checkbox\"></span>\r\n\t\t\t{name}\r\n\t\t</label>\r\n\t</div>\r\n\r\n\r\nexport const TodoListView = ({selectedList, dispatch}) => {\r\n\tif(!selectedList) return null\r\n\tconst { id, name, todos } = selectedList\r\n\tconst remainingTodos = todos.filter(({done}) => !done).length\r\n\tconst dispatchDeleteList = () => dispatch(deleteList(id, name))\r\n\tconst dispatchAddTodo = (name) => dispatch(addTodo(name, selectedList))\r\n\tconst dispatchCheckTodo = (id, name, done) => dispatch(checkTodo(id, name, done))\r\n\tconst dispatchClearCompletedTodos = () => dispatch(clearCompletedTodos(selectedList))\r\n\treturn <section className=\"todo-list\">\r\n\t\t<header>\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<p>{`${remainingTodos} ${remainingTodos===1 ? 'task' : 'tasks'} remaining`}</p>\r\n\t\t</header>\r\n\t\t<main>\r\n\t\t\t<div className=\"todos\">\r\n\t\t\t\t{todos.map(renderTodo(dispatchCheckTodo))}\r\n\t\t\t</div>\r\n\t\t\t<AddInput lable=\"new task name\" onAdd={dispatchAddTodo} />\r\n\t\t</main>\r\n\t\t<footer>\r\n\t\t\t<button onClick={dispatchClearCompletedTodos}>Clear completed tasks</button>\r\n\t\t\t<button onClick={dispatchDeleteList}>Delete list</button>\r\n\t\t</footer>\r\n\t</section>\r\n}\r\n\r\nexport const getSelectedList = ({todoLists, selectedList}) => todoLists.find(({id}) => id === selectedList.id)\r\n\r\nconst TodoList = () => {\r\n\tconst selectedList = useSelector(getSelectedList)\r\n\tconst dispatch = useDispatch()\r\n\treturn <TodoListView selectedList={selectedList} dispatch={dispatch} />\r\n}\r\n\r\nexport default TodoList\r\n","import React from 'react'\r\nimport './App.css'\r\n\r\nimport ListsOverview from './components/ListsOverview'\r\nimport TodoList from './components/TodoList'\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<h1 className=\"App-header\">Stuff I need to do</h1>\r\n\t\t\t<ListsOverview />\r\n\t\t\t<TodoList />\r\n\t\t\t<footer>\r\n\t\t\t\tThis project was inspired by Kevin Powell&apos;s <a href=\"https://github.com/kevin-powell/todo-list-collab\">todo-list-collab</a>\r\n\t\t\t</footer>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default App\r\n","import * as R from 'ramda'\r\n\r\nexport const defaultIfEqual = defaultValue => value =>\r\n\tR.equals(value, defaultValue) ? defaultValue : value\r\n\r\nexport const combineReducers = (reducers) => (state, action) => {\r\n\treturn R.pipe(\r\n\t\tR.map(reducer => reducer(state, action)),\r\n\t\tdefaultIfEqual(state),\r\n\t)(reducers)\r\n}\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension/logOnlyInProduction'\r\n\r\nexport const buildStoreFactory = ({\r\n\tcreateStore,\r\n\tapplyMiddleware,\r\n\tthunk,\r\n\tcomposeWithDevTools,\r\n}) => ({\r\n\trootReducer,\r\n\tpreloadedState,\r\n}) => createStore(\r\n\trootReducer,\r\n\tpreloadedState,\r\n\tcomposeWithDevTools({})(applyMiddleware(thunk)),\r\n)\r\n\r\nexport const injectedDependencies = {\r\n\tcreateStore,\r\n\tapplyMiddleware,\r\n\tthunk,\r\n\tcomposeWithDevTools,\r\n}\r\n\r\nexport default buildStoreFactory(injectedDependencies)\r\n","import * as R from 'ramda'\r\nimport actionType from '../actions/type'\r\nimport { defaultIfEqual } from './util'\r\n\r\nconst initialState = []\r\n\r\nconst addList = (state, id, name) => [\r\n\t...state,\r\n\t{\r\n\t\tid,\r\n\t\tname,\r\n\t\ttodos: [],\r\n\t},\r\n]\r\n\r\nconst deleteList = (state, id) => state.filter(todo => todo.id !== id)\r\n\r\nconst addTodo = (state, listId, id, name) => {\r\n\tconst index = R.findIndex(({id}) => id === listId, state)\r\n\tif(index === -1) return state\r\n\treturn R.adjust(\r\n\t\tindex,\r\n\t\ttodoList => ({\r\n\t\t\t...todoList,\r\n\t\t\ttodos: [...todoList.todos, {id, name, done: false}],\r\n\t\t}),\r\n\t\tstate,\r\n\t)\r\n}\r\n\r\nconst keepRefUpdate = fn => x => R.pipe(fn, defaultIfEqual(x))(x)\r\n\r\nconst checkTodo = (state, id, done) => keepRefUpdate(R.map(\r\n\tkeepRefUpdate((todolist) => ({\r\n\t\t...todolist,\r\n\t\ttodos: R.map(todo => todo.id === id ? {...todo, done} : todo)(todolist.todos),\r\n\t})),\r\n))(state)\r\n\r\nconst clearCompletedTodos = (state, fromListId) => {\r\n\tconst index = R.findIndex(({id}) => id === fromListId, state)\r\n\tif(index === -1) return state\r\n\treturn R.adjust(\r\n\t\tindex,\r\n\t\ttodoList => ({\r\n\t\t\t...todoList,\r\n\t\t\ttodos: todoList.todos.filter(({done}) => !done),\r\n\t\t}),\r\n\t\tstate,\r\n\t)\r\n}\r\n\r\nconst todoListsReducer = (rootState = {}, action = {}) => {\r\n\tconst { todoLists: state = initialState } = rootState\r\n\tconst { type, id, name, toList, done, fromList } = action\r\n\tswitch(type){\r\n\tcase actionType.addList:\r\n\t\treturn addList(state, id, name)\r\n\tcase actionType.deleteList:\r\n\t\treturn deleteList(state, id)\r\n\tcase actionType.addTodo:\r\n\t\treturn addTodo(state, toList.id, id, name)\r\n\tcase actionType.checkTodo:\r\n\t\treturn checkTodo(state, id, done)\r\n\tcase actionType.clearCompletedTodos:\r\n\t\treturn clearCompletedTodos(state, fromList.id)\r\n\tdefault:\r\n\t\treturn state\r\n\t}\r\n}\r\n\r\nexport default todoListsReducer\r\n","import actionType from '../actions/type'\r\n\r\nconst initialState = {\r\n\tid: undefined,\r\n\tname: undefined,\r\n}\r\n\r\nconst selectedListReducer = (rootState = {}, action = {}) => {\r\n\tconst { selectedList: state = initialState } = rootState\r\n\tconst { type, id, name } = action\r\n\tswitch(type){\r\n\tcase actionType.selectList:\r\n\t\treturn {\r\n\t\t\tid,\r\n\t\t\tname,\r\n\t\t}\r\n\tcase actionType.deleteList:\r\n\t\treturn initialState\r\n\tdefault:\r\n\t\treturn state\r\n\t}\r\n}\r\n\r\nexport default selectedListReducer\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { Provider } from 'react-redux'\r\nimport './index.css'\r\n\r\nimport App from './App'\r\nimport buildStore from './store/store'\r\nimport rootReducer from './reducers/rootReducer'\r\nimport { syncToLocalStore, getStateFromLocalStore } from './store/localStore'\r\n\r\nconst store = buildStore({\r\n\trootReducer,\r\n\tpreloadedState: getStateFromLocalStore(window.localStorage, 'todo list'),\r\n})\r\nstore.subscribe(syncToLocalStore(window.localStorage, 'todo list', store))\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>,\r\n\tdocument.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","import { combineReducers } from './util'\r\nimport todoListsReducer from './todoListsReducer'\r\nimport selectedListReducer from './selectedListReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n\ttodoLists: todoListsReducer,\r\n\tselectedList: selectedListReducer,\r\n})\r\n\r\nexport default rootReducer\r\n","export const syncToLocalStore = (localStorage, storeKey, store) => () => {\r\n\tlocalStorage.setItem(storeKey, JSON.stringify(store.getState()))\r\n}\r\n\r\nexport const getStateFromLocalStore = (localStorage, storeKey) => {\r\n\tconst stateString = localStorage.getItem(storeKey)\r\n\tif(!stateString) return undefined\r\n\ttry{\r\n\t\treturn JSON.parse(stateString)\r\n\t}catch(e){\r\n\t\treturn undefined\r\n\t}\r\n}\r\n"],"sourceRoot":""}